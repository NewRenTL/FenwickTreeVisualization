#include <raylib.h>
#include <vector>
#include <cmath>
#include <string>
#include <iostream>

// Fenwick Tree implementation (como se proporcionó anteriormente)

// Estructura para representar un nodo del árbol Fenwick

/**/
class Fenwick {
protected:
  int n;
  std::vector<int> tree;

  int g(int i) { return i & -i; }

public:
  Fenwick(int size) : n(size + 1), tree(n, 0) {}

  void update(int index, int delta) {
    index = index + 1;
    while (index < n) {
      tree[index] += delta;
      index = index + g(index);
    }
  }

  int prefixSum(int index) {
    int sum = 0;
    index = index + 1;
    while (index > 0) {
      sum += tree[index];
      index = index - g(index);
    }
    return sum;
  }

  const std::vector<int>& getTree() const {
    return tree;
  }
};

class FenwickRangeQueryPointUpdate : public Fenwick {
public:
  FenwickRangeQueryPointUpdate(int size) : Fenwick(size) {}

  void point_update(int index, int delta) { update(index, delta); }

  int range_query(int left, int right) {
    return prefixSum(right) - prefixSum(left - 1);
  }
};

class FenwickPointQueryRangeUpdate : public Fenwick {
public:
  FenwickPointQueryRangeUpdate(int size) : Fenwick(size) {}

  void range_update(int left, int right, int delta) {
    update(left, delta);
    update(right + 1, -delta);
  }

  int point_query(int index) { return prefixSum(index); }
};

class FenwickRangeQueryRangeUpdate : public Fenwick {
private:
  std::vector<int> array;

public:
  FenwickRangeQueryRangeUpdate(int size, const std::vector<int> &values)
      : Fenwick(size), array(size, 0) {
    for (int i = 0; i < size; ++i) {
      array[i] = values[i];
      update(i, array[i]);
      if (i + 1 < size)
        update(i + 1, -array[i]);
    }
  }

  void range_update(int left, int right, int delta) {
    update(left, delta);
    update(right + 1, -delta);
  }

  int query(int index) { return prefixSum(index) * index - array[index]; }

  int range_query(int left, int right) {
    return query(right) - query(left - 1);
  }
};

struct FenwickNode {
    int index;
    int value;
    float x, y;
};

// Función para dibujar un nodo en la ventana
void drawFenwickNode(FenwickNode node) {
    DrawCircle(node.x, node.y, 20, RED);
    DrawText(TextFormat("%d", node.value), static_cast<int>(node.x) - 10, static_cast<int>(node.y) - 5, 20, WHITE);
}

// Función para dibujar una línea entre dos nodos
void drawFenwickLine(FenwickNode parent, FenwickNode child) {
    DrawLine(parent.x, parent.y, child.x, child.y, WHITE);
}

// Función para dibujar el árbol Fenwick en la ventana
void drawFenwickTree(const std::vector<int>& tree, float x, float y, float xOffset, int level) {
    if (level >= tree.size()) return;

    // Calcula la posición del nodo actual
    FenwickNode currentNode;
    currentNode.index = level;
    currentNode.value = tree[level];
    currentNode.x = x;
    currentNode.y = y;
    drawFenwickNode(currentNode);

    // Dibuja los nodos "hijos" (relacionados a través de las operaciones de Fenwick Tree)
    int nextIndex = level + (level & -level);
    if (nextIndex < tree.size()) {
        FenwickNode childNode;
        childNode.index = nextIndex;
        childNode.value = tree[nextIndex];
        childNode.x = x + xOffset;
        childNode.y = y + 60;
        drawFenwickLine(currentNode, childNode);
        drawFenwickTree(tree, childNode.x, childNode.y, xOffset / 2, nextIndex);
    }
}

int main() {
    const int screenWidth = 800;
    const int screenHeight = 450;

    InitWindow(screenWidth, screenHeight, "Fenwick Tree Visualization");

    SetTargetFPS(60);

    // Ejemplo de valores iniciales para el Fenwick Tree
    std::vector<int> values = {1, 2, 3, 4, 5, 6, 7};
    FenwickRangeQueryPointUpdate fenwickTree(values.size());

    // Inicializa el Fenwick Tree con los valores dados
    for (int i = 0; i < values.size(); ++i) {
        fenwickTree.point_update(i, values[i]);
    }

    while (!WindowShouldClose()) {
        BeginDrawing();
        ClearBackground(BLACK);

        // Dibuja el árbol Fenwick
        drawFenwickTree(fenwickTree.getTree(), screenWidth / 2, 50, screenWidth / 4, 1);

        EndDrawing();
    }

    CloseWindow();

    return 0;
}